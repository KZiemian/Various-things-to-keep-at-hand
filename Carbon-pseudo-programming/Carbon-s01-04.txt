choice IntResult {
       Success(value: i32),
       Failure(error: String),
       Cancelled
}

fn ParseAsInt(s: String) -> IntResult {
   var r: i32 = 0;

   for (c: i32 in s) {
       if (not IsDigit(c)) {
       	  return .Failure("Invalid character");
       }
   }

   return .Success(r);
}

match (ParseAsInt(s)) {
      case .Success(value: i32) => {
      	   return value;
      }
      case .Failure(error: String) => {
      	   Display(error);
      }
      case .Cancelled => {
      	   Terminate();
      }
}

choice LikeABoolean { False, True }

package Geometry library "Shapes" api;

import LinearAlgebra library "Vector";

import ArbitraryPrecision;
