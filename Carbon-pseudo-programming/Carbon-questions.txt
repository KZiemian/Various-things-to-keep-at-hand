Czy warunki instrukcji sterujących muszą być w nawiasach?
`if (i == 2)`.

Czemu umieszczenie deklaracji o byciu w paczce jest opcjonalne?

Czemu paczka Carbon jest domyślnie importowana?

Definiowanie stałych słowem `let` jest dziwne.

Składnia dla struktur {.factor: i32, .prime: bool} jest taka nieporęczna.

Code and comments:
"Comments start with two slashes // and go to the end of the line. They are required to be the only non-whitespace on the line."
Jak się domyślam chodzi o to, by przed // były dopuszczone tylko białe znaki.

Czy p->m dla struktur jest potrzebny?

Czy typy w Carbonie czyta się od lewej do prawej, czy obowiązuje jakaś bardziej skomplikowana reguła?

Konwersja typów jako ,,2 as i32''. Czy nie można ładniej?

Czy potrzebujemy zachowywać podział na deklaracje i definicje?

Użycie `auto` dla dociekania typów, jest dziwne tak, jak było w C++.

Czy Carcon dopuszcza i++ i j++? I czy są to instrukcje?

returned to dziwne słowo na określenie wartości która ma zostać zwrócona.

Czy dobrze rozumiem, że virtualne metody mają sens sprzeczny z tym jakie mają w C++?

Jak można iterować po powiedzmy tablicy i oprócz elementu pobrać jeszcze indeks elementu?

Tutaj dostajemy informację, że ustalony typ to będzie i64.
let y: auto = x + 3;
Czy Carbon będzie posiadał odpowiednika typu int dla Go?

fn Position(a: i64) -> auto {
    return a > 0;
}

Nie podoba mi się to. Zbyt duży potencjał do błędu przy kompilacji.

Kod ilustrujący match jest mało user friendly.

fn Publish[addr me: Self*]() {
   me->published = DateTime.Now()
}

article.Publish();
Czy to jest coś analogicznego do (&article)->Publish();

Ponieważ w Carbonie ma być też article->Publish(); wydaje się to przesadnie skomplikowane.


„If a file has no package declaration at all, it is the api file belonging to the default package and default library. This is particularly for tests and smaller examples. No other library can import this library even from within the default package. It can be split across multiple impl files using a package impl; package declaration.”

Ten tekst nie jest zbyt zrozumiały.


import LinearAlgebra library "Vector";

Dlaczego "Vector" jest w cudzysłowie?


Libraries from the current package are imported by omitting the package name.

Czym jest „current package” w tym zdaniu? Nie jest to wcale takie jasne?

A private prefix on a declaration in an api file makes the name library private. This means the name is visible in the file and all impl files for the same library.

Czy plik `api` jest widzialny dla użytkowników?

Czy dobrze rozumiem, że skoro kod C++ importujemy jako
import Cpp library "circle.h";
to cały kod C++ będzie bibliotekami pewnej paczki? Czy w pewnych przypadkach to nie utworzy nam paczki, która jest zbyt duża by ją swobodnie obsługiwać?

Jeśli składnia na wskaźniki to int*, to czy nie możemy jej zmienić na *int jak w Go i Rustcie?
