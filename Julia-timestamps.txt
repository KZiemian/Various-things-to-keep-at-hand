_Data Analysis in Julia with Data Frames_, [https://www.youtube.com/watch?v=XRClA5YLiIc](https://www.youtube.com/watch?v=XRClA5YLiIc)

_Julia Lightning Round_, [https://www.youtube.com/watch?v=37L1OMk_3FU](https://www.youtube.com/watch?v=37L1OMk_3FU)


Cambridge Julia Meetup (May 2018)

Shared memory parallelism in Julia with multi-threading, [https://www.youtube.com/watch?v=YdiZa0Y3F3c](https://www.youtube.com/watch?v=YdiZa0Y3F3c)






Julia Lightning Round (Alan Edelman, Viral B. Shah)

_Julia Lightning Round_, [https://www.youtube.com/watch?v=37L1OMk_3FU](https://www.youtube.com/watch?v=37L1OMk_3FU)

















Fourth portion.

| Video title | Link to video | Video time | Playlist time |
|-------------|---------------|------------|---------------|
| [PuMaS.jl...](https://www.youtube.com/watch?v=KQ4Vtsd9XNw) | [https://www.youtube.com/watch?v=KQ4Vtsd9XNw](https://www.youtube.com/watch?v=KQ4Vtsd9XNw) | 31:55 | 44:44 |
| [Julia powered personalised...](https://www.youtube.com/watch?v=9J54K6HbPNQ) | [https://www.youtube.com/watch?v=9J54K6HbPNQ](https://www.youtube.com/watch?v=9J54K6HbPNQ) | 12:13 | 15:12 |
| [500K - Providing training...](https://www.youtube.com/watch?v=aDXDnTT7cps) | [https://www.youtube.com/watch?v=aDXDnTT7cps](https://www.youtube.com/watch?v=aDXDnTT7cps) | 12:23 | 15:08 |
| [Flux...](https://www.youtube.com/watch?v=R81pmvTP_Ik) | [https://www.youtube.com/watch?v=R81pmvTP_Ik](https://www.youtube.com/watch?v=R81pmvTP_Ik) | 26:20 | 29:51 |
| [Combine ML for...](https://www.youtube.com/watch?v=QBT0wq2WBHE) | [https://www.youtube.com/watch?v=QBT0wq2WBHE](https://www.youtube.com/watch?v=QBT0wq2WBHE) | 9:33 | 16:34 |
| [From Deep Neural...](https://www.youtube.com/watch?v=YVABTDrQ0eQ) | [https://www.youtube.com/watch?v=YVABTDrQ0eQ](https://www.youtube.com/watch?v=YVABTDrQ0eQ) | 10:31 | 11:19 |
| [Whale recognition using...](https://www.youtube.com/watch?v=b7Dk_CPfS6M) | [https://www.youtube.com/watch?v=b7Dk_CPfS6M](https://www.youtube.com/watch?v=b7Dk_CPfS6M) | 9:22 | 10:12 |
| [Estimating Non-Linear...](https://www.youtube.com/watch?v=dFyr8U-SY2M) | [https://www.youtube.com/watch?v=dFyr8U-SY2M](https://www.youtube.com/watch?v=dFyr8U-SY2M) | 28:14 | 30:48 |
| [GSReg.jl...](https://www.youtube.com/watch?v=dBvXZqZRSsc) | [https://www.youtube.com/watch?v=dBvXZqZRSsc](https://www.youtube.com/watch?v=dBvXZqZRSsc) | 13:08 | 14:29 |
| [Fast derivative pricing...](https://www.youtube.com/watch?v=dy7tXk403bM) | [https://www.youtube.com/watch?v=dy7tXk403bM](https://www.youtube.com/watch?v=dy7tXk403bM) | 11:44 | 13:22 |
| [Enhanced String handling...](https://www.youtube.com/watch?v=kWqFRGLdqc4) | [https://www.youtube.com/watch?v=kWqFRGLdqc4](https://www.youtube.com/watch?v=kWqFRGLdqc4) | 15:04 | 21:35 |
| [An introduction to high...](https://www.youtube.com/watch?v=jS9eouMJf_Y) | [https://www.youtube.com/watch?v=jS9eouMJf_Y](https://www.youtube.com/watch?v=jS9eouMJf_Y) | 39:21 | 42:28 |
| [For Loops 2.0...](https://www.youtube.com/watch?v=Rp7sTl9oPNI) | [https://www.youtube.com/watch?v=Rp7sTl9oPNI](https://www.youtube.com/watch?v=Rp7sTl9oPNI) | 32:28 | 51:39 |
| [Hierarchical Tensor...](https://www.youtube.com/watch?v=8QGo98705jY) | [https://www.youtube.com/watch?v=8QGo98705jY](https://www.youtube.com/watch?v=8QGo98705jY) | 12:31 | 14:26 |
| [The JuliaGraphs ecosystem...](https://www.youtube.com/watch?v=OZuQoxTPoyM) | [https://www.youtube.com/watch?v=OZuQoxTPoyM](https://www.youtube.com/watch?v=OZuQoxTPoyM) | 13:51 | 15:35 |
| [EvolvingGraphs.jl...](https://www.youtube.com/watch?v=qo25P5TURuw) | [https://www.youtube.com/watch?v=qo25P5TURuw](https://www.youtube.com/watch?v=qo25P5TURuw) | 13:47 | 15:45 |
| [Solving Partial Differential...](https://www.youtube.com/watch?v=okGybBmihOE) | [https://www.youtube.com/watch?v=okGybBmihOE](https://www.youtube.com/watch?v=okGybBmihOE) | 1:48:53 | 1:57:26 |
| [Queryverse](https://www.youtube.com/watch?v=2oXSA2w-p28) | [https://www.youtube.com/watch?v=2oXSA2w-p28](https://www.youtube.com/watch?v=2oXSA2w-p28) | 2:07:48 | 2:18:32 |
| [A practical introduction...](https://www.youtube.com/watch?v=SeqAQHKLNj4) | [https://www.youtube.com/watch?v=SeqAQHKLNj4](https://www.youtube.com/watch?v=SeqAQHKLNj4) | 2:09:09 | 2:15:15 |
| [Natural Language Processing...](https://www.youtube.com/watch?v=f7RNuOLDyM8) | [https://www.youtube.com/watch?v=f7RNuOLDyM8](https://www.youtube.com/watch?v=f7RNuOLDyM8) | 1:32:09 | 1:34:29 |


The last portion.

| Video title | Link to video | Video time | Playlist time |
|-------------|---------------|------------|---------------|
| [Numerical Analysis in Julia](https://www.youtube.com/watch?v=MAhLlLOxWGg) | [https://www.youtube.com/watch?v=MAhLlLOxWGg](https://www.youtube.com/watch?v=MAhLlLOxWGg) | 2:06:52 | 2:15:23 |
| [Julia apps on...](https://www.youtube.com/watch?v=kSp6d3qSb3I) | [https://www.youtube.com/watch?v=kSp6d3qSb3I](https://www.youtube.com/watch?v=kSp6d3qSb3I) | 33:03 | 38:51 |
| [Julia for Physics...](https://www.youtube.com/watch?v=BmVd7pw6Trc) | [https://www.youtube.com/watch?v=BmVd7pw6Trc](https://www.youtube.com/watch?v=BmVd7pw6Trc) | 16:22 | 19:26 |
| [Native Elementary Functions...](https://www.youtube.com/watch?v=B03F6EFUm78) | [https://www.youtube.com/watch?v=B03F6EFUm78](https://www.youtube.com/watch?v=B03F6EFUm78) | 14:32 | 20:03 |
| [Atomistic simulation...](https://www.youtube.com/watch?v=Kbrj4EZbGWs) | [https://www.youtube.com/watch?v=Kbrj4EZbGWs](https://www.youtube.com/watch?v=Kbrj4EZbGWs) | 11:36 | 30:12 |
| [Simulating global...](https://www.youtube.com/watch?v=EahBURR9b1U) | [https://www.youtube.com/watch?v=EahBURR9b1U](https://www.youtube.com/watch?v=EahBURR9b1U) | 26:03 | 27:09 |
| [Learnings from scaling Julia up...](https://www.youtube.com/watch?v=9I2SBKGOfS4) | [https://www.youtube.com/watch?v=9I2SBKGOfS4](https://www.youtube.com/watch?v=9I2SBKGOfS4) | 13:11 | 13:47 |



































































Interesting YT videos on numerical methods

After watching, in my humble opinion, wonderful Nick Highman's keynote talk from JuliaCon 2018 [_Tricks and Tips in Numerical Computing_](https://www.youtube.com/watch?v=Q9OLOqEhc64), I found on YT more talks and lectures by him. Probably there are more people like me in Julia community, interested in numerical computing but still at the begin of they journey in this filed. I believe that may also can find them useful and enlightening, so I decided to put some links to them here. I hope that I'm not totally wrong in thinking that.

Nick Highman, [_Probabilistic Versus Worst-Case Rounding Error Analysis_](https://www.youtube.com/watch?v=-1hVnDo4qzw)
Nick Highman, [_Solving Dense Linear Systems: A Brief History and Future Directions_](https://www.youtube.com/watch?v=xSES0VrCRbc), 2021










































































































JuliaCon 2019 | Raising Diversity & Inclusion among Julia users

_Raising Diversity & Inclusion among Julia users_, [https://www.youtube.com/watch?v=9cedY6zyo8I](https://www.youtube.com/watch?v=9cedY6zyo8I)

00:00 Welcome!
01:24 Julia Diversity and Inclusion Grant
01:53 Outline of the talk






How much do you need to know about compiler to work on Julia math stdlib?










I'm not sure that I used words "parallel" and "parallelism" in correct way. Someone should check that.

00:00 Welcome!
00:28 Why we need threads?
01:37 Task parallelism
02:43 Data parallelism
03:35 Julia's experimental threading infrastructure added in 2015/2016
04:35 Successes of aforementioned threading infrastructure
05:35 What we've learned
06:25 Problem is not adding threads to Julia, but making them useful at every level
06:59 Nested parallelism: parallel code calling function from library that is also parallel
08:18 Example: multiplying two n x n matrices
09:29 Example: running code sequentially
10:10 Example: you need O(n^2) space
10:27 Example: running code in parallel on 4 cores with OpenMP with OMP_NESTED = 1
11:26 Example: such parallel code need O(n^3) in space
11:37 Another way: work stealing
12:47 Problem: work stealing algorithm essentially run like serial algorithm
13:57 Parallel depth-first scheluding
15:52 **partr** -- parallel task runtime
17:15 **partr** implementation
18:30 **partr** -- priority queues
21:23 **partr** -- handling nested parallelism
23:22 Possible problem: we not synchronize at each spawn point
24:13 Why all these things are important?
24:59 Q&A: is Julia more suitable for implementation of **partr** than other languages?

Shared memory parallelism in Julia with multi-threading | Kiran Pamnany | Cambridge Julia Meetup (May 2018), [https://www.youtube.com/watch?v=YdiZa0Y3F3c](https://www.youtube.com/watch?v=YdiZa0Y3F3c)

This talk is now 26:33 long, but it would be nice to cut it around 25:52. You can look at proposed timestamps [here](https://github.com/JuliaCommunity/YouTubeVideoTimestamps/issues/151).
