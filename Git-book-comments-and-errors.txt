Page 29.
$ vim CONTRIBUTING.md
$ git status

Page 36.

To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. ??

Page 37.
Another useful thing you may want to do is to keep the file in your working tree but remove it from
your staging area.



In version 2.1.348-2-ga76dfab, 2022-07-19, Figure 6 has "Stage Fixes". Since over five years passes, should this issue remain open?

Since over five years pass since opening this issue, I think we can close it.

It seems that there are no big plans to make a new edition of this book, which seems to me to be only feasible thing to do, that can make justice for eight years of Git development from 2014 to 2022. But, this is only my opinion, I may be wrong.

Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with
the mv command. Czy to jest komentarz do komendy git mv?



Add section about using space, Enter and "q" to navigate log entries. And what "\" means in command line.


Page 45.
"This command takes your staging area and uses it for the commit." -> This command takes your staging area and add its content to that from previously made commit. Then it creates new commit that will overwrite this made previoulsy.????

"You can edit the message the same as always, but it overwrites your previous commit." -> You can edit the message the same as always, but remember that you previous comming commint will be replaced by this one.



Page 50.
Add comment "we explain push, pull and fetch in the future".

Page 51.
Add comment about push, pull and fetch.

Page 52.
Add comment "For now you just need to know, that in your repository you have now parallel access to both repoistory that you cloned and probably already modified and to work of Paul."

"After you do this, you should have references to all the branches from that
remote, which you can merge in or inspect at any time." Co to są gałęzie gita, to zostanie dopiero omówione.

"Pushing to Your Remotes" make beginning of the text more user friendly.




Page 22.
"value for one of these values" -> "value for one of these variables"?

Page 28.
Changes to be committed:
(use "git reset HEAD <file>..." to unstage)
or
(use "git restore --staged <file>..." to unstage)???

Page 41.
git log --pretty=oneline
"Initial commit" or "first commit"? To samo w poprzednich punktach.

Page 43.
--graph dla innego niż używane repozytorium. git://github.com/dustin/grit

Page 46.
git reset HEAD <file>... -> git restore --staged <file>

Na dole strony
git reset HEAD <file>… (kropki w książce są za wysoko).


Page 47.
"git checkout -- <file>..." -> "git restore <file>..."

Page 48.
(see Data Recovery for data recovery). -> (see Data Recovery for more details).

"Unstaging a Staged File with git restore" Ten rozdział jest jakby copy-pastem jednego z poprzednich.

Page 49.

git restore --staged <file>… (kropki w książce są zbyt wysoko)

Page 51.
Dodaj informacje o usuwaniu "remote repository".

Page 54.
"are no longer using a particular mirror" -> "they are no longer using a particular mirror"?

Page 55.
"Listing tag wildcards requires -l or --list option" Ten fragment nie jest zbyt jasny.

Page 56.
Nie jest podane do którego commita zostanie dodany tworzony tag.

Page 59.
"`git push` pushes both types of tags" -> "`git push <remote>` pushes both types of tags"?

Page 59.
Sprawdzić czy w nowej wersji można już przesłać tylko lekkie tagi.

W rozdziale "Git basics" brakuje fragmentu na temat tego jak stworzyć repozytorium Gita od zera.

Page 64.
Nazwa domyślna głównej gałęzi to obecnie „master”, czy „main”?

Page 66.
Pojedyncze słowo "branch" na górze strony.

Nie widzę różnicy między
git log -1 --oneline
a
git log -1 --oneline --decorate

Page 67.

Obramówki szarych węzłów w diagramie 14 nie wyglądają najlepiej. Ich obramówka nie jest pełna.

Co to znaczy „vim test.rm”? Chyba przydałoby się to jakoś wyjaśnić.

Page 72.
Strzałki na Figure 20 należy poprawić.
